import axiosInstance from '../config/axios';
import { ApiResponse } from '../api-helpers';

// Ä°malat fiÅŸi yanÄ±t tipi
export interface ProductionOrderResponse {
  // Backend'den gelen orijinal alanlar
  transferNumber: string;
  operationDate: string;
  operationTime: string;
  series: string;
  seriesNumber: string;
  innerProcessCode: string;
  innerProcessDescription: string;
  description?: string;
  targetWarehouseCode: string;
  targetWarehouseName: string;
  warehouseCode: string;
  warehouseDescription: string;
  isCompleted: boolean;
  isLocked: boolean;
  isTransferApproved: boolean;
  transferApprovedDate?: string;
  totalQty: number;
  InnerHeaderID: string;
  
  // Frontend'de kullanÄ±lan alanlar (dÃ¶nÃ¼ÅŸtÃ¼rme sonrasÄ± eklenir)
  orderNumber?: string;
  innerHeaderId?: string;
  totalQuantity?: number;
  
  // Detay sayfasÄ±nda kullanÄ±lan alanlar
  createdUserName?: string;
  createdDate?: string;
  lastUpdatedUserName?: string;
  lastUpdatedDate?: string;
  items: ProductionOrderItemResponse[];
}

// Ä°malat fiÅŸi satÄ±r yanÄ±t tipi
export interface ProductionOrderItemResponse {
  innerLineId: string;
  lineNumber: number;
  itemCode: string;
  itemName: string;
  colorCode?: string;
  colorName?: string;
  itemDim1Code?: string;
  itemDim1Name?: string;
  itemDim2Code?: string;
  itemDim2Name?: string;
  itemDim3Code?: string;
  itemDim3Name?: string;
  unitCode: string;
  unitName: string;
  quantity: number;
  description?: string;
}

// Ä°malat fiÅŸi istek tipi
export interface ProductionOrderRequest {
  targetWarehouseCode: string; // Hedef depo kodu (veritabanÄ±nda WarehouseCode alanÄ±na yazÄ±lÄ±r)
  description?: string;
  operationDate?: string;
  shipmentMethodCode: string; // Sevkiyat yÃ¶ntemi kodu (zorunlu)
  innerProcessCode: string; // Ä°ÅŸlem kodu: OP (Ã¼retim sipariÅŸi)
  items: ProductionOrderItemRequest[];
}

// Ä°malat fiÅŸi satÄ±r istek tipi
export interface ProductionOrderItemRequest {
  itemCode: string;
  colorCode?: string;
  itemDim1Code?: string;
  Quantity: number;
  quantity?: number; // Eski formlardan gelen quantity alanÄ± (Quantity ile aynÄ± ama kÃ¼Ã§Ã¼k harfle)
  unitCode: string; // Birim kodu (zorunlu)
  lineDescription?: string;
  barcode?: string; // Barkod (API tarafÄ±ndan zorunlu)
  currencyCode?: string; // Para birimi kodu (varsayÄ±lan: TRY)
  costPrice?: number; // Birim maliyet fiyatÄ±
  costAmount?: number; // Toplam maliyet tutarÄ± (Quantity x costPrice)
  itemTypeCode?: number; // ÃœrÃ¼n tipi kodu (1: ÃœrÃ¼n, 2: Malzeme)
}

// Ä°malat fiÅŸi filtreleme parametreleri
export interface ProductionOrderFilterParams {
  orderNumber?: string;
  targetWarehouseCode?: string;
  startDate?: Date;
  endDate?: Date;
}

// Depo yanÄ±t tipi
export interface WarehouseResponse {
  warehouseCode: string;
  warehouseName: string;
  isDefault: boolean;
}

const productionOrderApi = {
  // Ä°malat fiÅŸi listesini getiren fonksiyon
  getProductionOrders: async (params?: ProductionOrderFilterParams): Promise<ProductionOrderResponse[]> => {
    try {
      const queryParams = new URLSearchParams();
      
      if (params?.targetWarehouseCode) {
        queryParams.append('targetWarehouseCode', params.targetWarehouseCode);
      }
      
      if (params?.startDate) {
        queryParams.append('startDate', params.startDate.toISOString().split('T')[0]);
      }
      
      if (params?.endDate) {
        queryParams.append('endDate', params.endDate.toISOString().split('T')[0]);
      }
      
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      queryParams.append('innerProcessCode', 'OP');
      
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸleri iÃ§in endpoint oluÅŸturuyoruz
      // Ãœretim sipariÅŸleri iÃ§in WarehouseTransfer API'sini kullanÄ±yoruz
      const url = `/api/WarehouseTransfer?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri getiriliyor', { url });
      
      const response = await axiosInstance.get<ApiResponse<ProductionOrderResponse[]>>(url);
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      // API'den gelen verileri frontend'in beklediÄŸi formata dÃ¶nÃ¼ÅŸtÃ¼r
      const formattedData = (response.data.data || []).map(item => ({
        ...item,
        orderNumber: item.transferNumber, // transferNumber'Ä± orderNumber olarak kullan
        innerHeaderId: item.InnerHeaderID, // BÃ¼yÃ¼k/kÃ¼Ã§Ã¼k harf uyumsuzluÄŸunu gider
        totalQuantity: item.totalQty, // totalQty'yi totalQuantity olarak kullan
        items: item.items || [] // items alanÄ± yoksa boÅŸ dizi kullan
      }));
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri formatlandÄ±', { formattedData });
      return formattedData;
    } catch (error) {
      console.error('Error fetching production orders:', error);
      // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r
      return [];
    }
  },
  
  // Ä°malat fiÅŸi detayÄ±nÄ± getiren fonksiyon
  getProductionOrderByNumber: async (innerNumber: string): Promise<ProductionOrderResponse | null> => {
    try {
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸi detayÄ± iÃ§in endpoint oluÅŸturuyoruz
      // Ãœretim sipariÅŸleri iÃ§in WarehouseTransfer API'sini kullanÄ±yoruz
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OP');
      const url = `/api/WarehouseTransfer/${innerNumber}?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi detayÄ± getiriliyor', { innerNumber, url });
      
      const response = await axiosInstance.get<ApiResponse<ProductionOrderResponse>>(url);
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi detayÄ± baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      if (response.data.success && response.data.data) {
        return response.data.data;
      } else {
        console.warn('API: Ãœretim sipariÅŸi detayÄ± baÅŸarÄ±sÄ±z veya veri yok', response.data);
        return null;
      }
    } catch (error) {
      console.error(`Ãœretim sipariÅŸi detayÄ± getirilirken hata oluÅŸtu ${innerNumber}:`, error);
      return null;
    }
  },
  
  // Ä°malat fiÅŸi kalemlerini getiren fonksiyon
  getProductionOrderItems: async (innerNumber: string): Promise<ProductionOrderItemResponse[]> => {
    try {
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸi kalemleri iÃ§in endpoint oluÅŸturuyoruz
      // Ãœretim sipariÅŸleri iÃ§in WarehouseTransfer API'sini kullanÄ±yoruz
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OP');
      const url = `/api/WarehouseTransfer/${innerNumber}/items?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi kalemleri getiriliyor', { innerNumber, url });
      
      const response = await axiosInstance.get<ApiResponse<ProductionOrderItemResponse[]>>(url);
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi kalemleri baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      return response.data.data || [];
    } catch (error) {
      console.error(`Ãœretim sipariÅŸi kalemleri getirilirken hata oluÅŸtu ${innerNumber}:`, error);
      return []; // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r, throw etme
    }
  },
  
  // Yeni imalat fiÅŸi oluÅŸturan fonksiyon
  createProductionOrder: async (request: ProductionOrderRequest): Promise<ProductionOrderResponse> => {
    try {
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ve zorunlu alanlarÄ± ekliyoruz
      const requestWithProcessCode = {
        ...request,
        innerProcessCode: 'OP',
        // AÃ§Ä±klama alanÄ± zorunlu, boÅŸ ise varsayÄ±lan bir deÄŸer atayarak hata almasÄ±nÄ± Ã¶nleme
        description: request.description || 'Ä°malat FiÅŸi ' + new Date().toLocaleDateString('tr-TR')
      };
      
      // ÃœrÃ¼n satÄ±rlarÄ±nÄ± dÃ¼zgÃ¼n formata getir
      requestWithProcessCode.items = request.items.map(item => {
        const { quantity: origQuantity, ...rest } = item;
        
        // Miktar deÄŸerini float olarak hazÄ±rlama
        let finalQuantity = origQuantity || item.Quantity || 1;
        
        // Miktar string ise ("12,45" gibi) float'a Ã§evir
        if (typeof finalQuantity === 'string') {
          // VirgÃ¼llÃ¼ sayÄ±yÄ± noktalÄ± sayÄ±ya Ã§evir ("12,45" -> "12.45")
          const strValue = finalQuantity as string;
          finalQuantity = parseFloat(strValue.replace(',', '.'));
        }
        
        // SayÄ± deÄŸilse veya NaN ise 1 olarak ayarla
        if (isNaN(finalQuantity) || finalQuantity <= 0) {
          finalQuantity = 1;
        }
        
        return {
          ...rest,
          Quantity: finalQuantity, // DÃ¼zeltilmiÅŸ miktar formatÄ±
          currencyCode: item.currencyCode || 'TRY',
          costPrice: item.costPrice || 0,
          costAmount: item.costAmount || 0,
          colorCode: item.colorCode || '0', // ColorCode zorunlu alan
          itemDim1Code: item.itemDim1Code || '', // ItemDim1Code zorunlu alan
          itemTypeCode: item.itemTypeCode !== undefined ? item.itemTypeCode : 2 // ÃœrÃ¼nÃ¼n kendi tipini kullan, yoksa varsayÄ±lan olarak 2 (Malzeme)
        };
      });
      
      // Ä°stek verilerini detaylÄ± gÃ¶rÃ¼ntÃ¼le (geliÅŸtirme aÅŸamasÄ±nda yardÄ±mcÄ± olmasÄ± iÃ§in)
      console.log('Ä°malat fiÅŸi oluÅŸturma isteÄŸi:', JSON.stringify(requestWithProcessCode, null, 2));
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi oluÅŸturuluyor');
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸi oluÅŸturma iÃ§in endpoint oluÅŸturuyoruz
      const response = await axiosInstance.post<ApiResponse<string>>(
        '/api/WarehouseTransfer',
        requestWithProcessCode,
        {
          headers: {
            'Content-Type': 'application/json'
          },
          withCredentials: true
        }
      );
      
      if (!response.data.success) {
        throw new Error(response.data.message || 'Ä°malat fiÅŸi oluÅŸturulamadÄ±');
      }
      
      // API'den dÃ¶nen imalat fiÅŸi numarasÄ±nÄ± string olarak kullan
      const innerNumber = String(response.data.data);
      console.log('ğŸ“Ÿ API: Ä°malat fiÅŸi baÅŸarÄ±yla oluÅŸturuldu. FiÅŸ No:', innerNumber);
      
      // OluÅŸturulan imalat fiÅŸi detaylarÄ±nÄ± getir
      let detailResponse;
      let retryCount = 0;
      const maxRetries = 3;
      
      // Yeniden deneme mekanizmasÄ±
      while (retryCount < maxRetries) {
        try {
          // Ä°malat fiÅŸi detaylarÄ±nÄ± getirmeyi dene
          // innerProcessCode parametresini ekle ve orderNumber'Ä±n string olduÄŸundan emin ol
          const queryParams = new URLSearchParams();
          queryParams.append('innerProcessCode', 'OP');
          detailResponse = await axiosInstance.get<ApiResponse<ProductionOrderResponse>>(`/api/WarehouseTransfer/${innerNumber}?${queryParams.toString()}`);
          
          // BaÅŸarÄ±lÄ± yanÄ±t ve veri varsa dÃ¶ngÃ¼den Ã§Ä±k
          if (detailResponse.data.success && detailResponse.data.data) {
            break;
          }
          
          // YanÄ±t var ama satÄ±rlar olmayabilir, satÄ±rlarÄ± ayrÄ±ca getirmeyi dene
          console.log(`Deneme ${retryCount + 1}: YanÄ±t alÄ±ndÄ± ama satÄ±rlar kontrol ediliyor...`);
          
          try {
            // Ä°malat fiÅŸi satÄ±rlarÄ±nÄ± getirmeyi dene
            const queryParams = new URLSearchParams();
            queryParams.append('innerProcessCode', 'OP');
            const itemsResponse = await axiosInstance.get<ApiResponse<ProductionOrderItemResponse[]>>(
              `/api/WarehouseTransfer/${innerNumber}/items?${queryParams.toString()}`
            );
            
            // SatÄ±rlar baÅŸarÄ±yla alÄ±ndÄ±ysa, detay yanÄ±tÄ±na ekle
            if (itemsResponse.data.success && itemsResponse.data.data) {
              if (!detailResponse.data.data) {
                detailResponse.data.data = {} as ProductionOrderResponse;
              }
              detailResponse.data.data.items = itemsResponse.data.data;
              break;
            }
          } catch (itemsError) {
            console.warn(`Ä°malat fiÅŸi satÄ±rlarÄ± getirilirken hata oluÅŸtu. FiÅŸ No: ${innerNumber}:`, itemsError);
            // Ana istek iÃ§in yeniden denemeye devam et
          }
        } catch (retryError) {
          console.warn(`Deneme ${retryCount + 1} baÅŸarÄ±sÄ±z:`, retryError);
        }
        
        // Yeniden denemeden Ã¶nce bekle
        await new Promise(resolve => setTimeout(resolve, 1000));
        retryCount++;
      }
      
      // TÃ¼m denemelerden sonra hala geÃ§erli bir yanÄ±t yoksa
      if (!detailResponse || !detailResponse.data.success) {
        console.warn('Birden fazla denemeden sonra imalat fiÅŸi detaylarÄ± getirilemedi');
        
        // Sadece fiÅŸ numarasÄ± ile minimal bir yanÄ±t dÃ¶ndÃ¼r
        const minimalResponse: Partial<ProductionOrderResponse> = {
          transferNumber: innerNumber,
          operationDate: new Date().toISOString().split('T')[0],
          operationTime: new Date().toISOString().split('T')[1].substring(0, 8),
          innerProcessCode: 'OP',
          innerProcessDescription: 'Ä°malat FiÅŸi',
          warehouseCode: requestWithProcessCode.targetWarehouseCode, // Kaynak depo olarak hedef depoyu kullan
          warehouseDescription: '',
          targetWarehouseCode: requestWithProcessCode.targetWarehouseCode,
          targetWarehouseName: '',
          isCompleted: false,
          isLocked: false,
          isTransferApproved: false,
          totalQty: requestWithProcessCode.items.reduce((sum, item) => sum + (item.Quantity || 0), 0),
          InnerHeaderID: '',
          items: []
        };
        
        // Ã–nemli: orderNumber alanÄ±nÄ± innerNumber ile doldur
        minimalResponse.orderNumber = innerNumber;
        
        return minimalResponse as ProductionOrderResponse;
      }
      
      // API'den gelen yanÄ±tÄ± kullan
      const productionOrderResponse = detailResponse.data.data;
      
      // Ã–nemli: orderNumber alanÄ±nÄ± innerNumber (transferNumber) ile doldur
      // Bu, frontend'de navigasyon iÃ§in kullanÄ±lacak
      productionOrderResponse.orderNumber = productionOrderResponse.transferNumber || innerNumber;
      
      console.log('ğŸ“Ÿ API: DÃ¶nÃ¼ÅŸ deÄŸeri kontrolÃ¼:', {
        transferNumber: productionOrderResponse.transferNumber,
        orderNumber: productionOrderResponse.orderNumber,
        innerNumber: innerNumber
      });
      
      return productionOrderResponse;
    } catch (error: any) {
      console.error('Ä°malat fiÅŸi oluÅŸturulurken hata oluÅŸtu:', error);
      
      // Hata detaylarÄ±nÄ± gÃ¶rÃ¼ntÃ¼le
      if (error.response) {
        console.error('Hata detaylarÄ±:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: error.response.data
        });
        
        // DoÄŸrulama hatalarÄ±nÄ± detaylÄ± gÃ¶ster
        if (error.response.data && error.response.data.validationErrors) {
          console.error('DoÄŸrulama hatalarÄ±:', error.response.data.validationErrors);
        }
        
        // Hata mesajÄ±nÄ± gÃ¶ster
        if (error.response.data && error.response.data.message) {
          console.error('Hata mesajÄ±:', error.response.data.message);
        }
      }
      
      throw error;
    }
  },
  
  // DepolarÄ± getiren fonksiyon
  getWarehouses: async (): Promise<WarehouseResponse[]> => {
    try {
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri iÃ§in depolarÄ± getirme iÅŸlemi baÅŸlatÄ±lÄ±yor');
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OP');
      // Endpoint dÃ¼zeltildi: Warehouse Transfer API'sinin kullandÄ±ÄŸÄ± endpoint'i kullanÄ±yoruz
      const response = await axiosInstance.get<ApiResponse<WarehouseResponse[]>>(
        `/api/WarehouseTransfer/warehouses?${queryParams.toString()}`
      );
      
      console.log('ğŸ“Ÿ API: Depolar baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      return response.data.data || [];
    } catch (error) {
      console.error('Error fetching warehouses:', error);
      return []; // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r, throw etme
    }
  }
};

export default productionOrderApi;
