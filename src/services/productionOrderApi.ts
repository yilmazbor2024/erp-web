import axiosInstance from '../config/axios';
import { ApiResponse } from '../api-helpers';

// Ä°malat fiÅŸi yanÄ±t tipi
export interface ProductionOrderResponse {
  // Backend'den gelen orijinal alanlar
  transferNumber: string;
  operationDate: string;
  operationTime: string;
  series: string;
  seriesNumber: string;
  innerProcessCode: string;
  innerProcessDescription: string;
  description?: string;
  targetWarehouseCode: string;
  targetWarehouseName: string;
  warehouseCode: string;
  warehouseDescription: string;
  isCompleted: boolean;
  isLocked: boolean;
  isTransferApproved: boolean;
  transferApprovedDate?: string;
  totalQty: number;
  InnerHeaderID: string;
  
  // Frontend'de kullanÄ±lan alanlar (dÃ¶nÃ¼ÅŸtÃ¼rme sonrasÄ± eklenir)
  orderNumber?: string;
  innerHeaderId?: string;
  totalQuantity?: number;
  
  // Detay sayfasÄ±nda kullanÄ±lan alanlar
  createdUserName?: string;
  createdDate?: string;
  lastUpdatedUserName?: string;
  lastUpdatedDate?: string;
  items: ProductionOrderItemResponse[];
}

// Ä°malat fiÅŸi satÄ±r yanÄ±t tipi
export interface ProductionOrderItemResponse {
  innerLineId: string;
  lineNumber: number;
  itemCode: string;
  itemName: string;
  colorCode?: string;
  colorName?: string;
  itemDim1Code?: string;
  itemDim1Name?: string;
  itemDim2Code?: string;
  itemDim2Name?: string;
  itemDim3Code?: string;
  itemDim3Name?: string;
  unitCode: string;
  unitName: string;
  quantity: number;
  description?: string;
}

// Ä°malat fiÅŸi istek tipi
export interface ProductionOrderRequest {
  targetWarehouseCode: string; // Hedef depo kodu (veritabanÄ±nda WarehouseCode alanÄ±na yazÄ±lÄ±r)
  description?: string;
  operationDate?: string;
  shipmentMethodCode: string; // Sevkiyat yÃ¶ntemi kodu (zorunlu)
  innerProcessCode: string; // Ä°ÅŸlem kodu: OP (Ã¼retim sipariÅŸi)
  items: ProductionOrderItemRequest[];
}

// Ä°malat fiÅŸi satÄ±r istek tipi
export interface ProductionOrderItemRequest {
  itemCode: string;
  colorCode?: string;
  itemDim1Code?: string;
  Quantity: number;
  unitCode: string; // Birim kodu (zorunlu)
  lineDescription?: string;
  barcode?: string; // Barkod (API tarafÄ±ndan zorunlu)
}

// Ä°malat fiÅŸi filtreleme parametreleri
export interface ProductionOrderFilterParams {
  orderNumber?: string;
  targetWarehouseCode?: string;
  startDate?: Date;
  endDate?: Date;
}

// Depo yanÄ±t tipi
export interface WarehouseResponse {
  warehouseCode: string;
  warehouseName: string;
  isDefault: boolean;
}

const productionOrderApi = {
  // Ä°malat fiÅŸi listesini getiren fonksiyon
  getProductionOrders: async (params?: ProductionOrderFilterParams): Promise<ProductionOrderResponse[]> => {
    try {
      const queryParams = new URLSearchParams();
      
      if (params?.targetWarehouseCode) {
        queryParams.append('targetWarehouseCode', params.targetWarehouseCode);
      }
      
      if (params?.startDate) {
        queryParams.append('startDate', params.startDate.toISOString().split('T')[0]);
      }
      
      if (params?.endDate) {
        queryParams.append('endDate', params.endDate.toISOString().split('T')[0]);
      }
      
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      queryParams.append('innerProcessCode', 'OP');
      
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸleri iÃ§in endpoint oluÅŸturuyoruz
      // Ãœretim sipariÅŸleri iÃ§in WarehouseTransfer API'sini kullanÄ±yoruz
      const url = `/api/WarehouseTransfer?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri getiriliyor', { url });
      
      const response = await axiosInstance.get<ApiResponse<ProductionOrderResponse[]>>(url);
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      // API'den gelen verileri frontend'in beklediÄŸi formata dÃ¶nÃ¼ÅŸtÃ¼r
      const formattedData = (response.data.data || []).map(item => ({
        ...item,
        orderNumber: item.transferNumber, // transferNumber'Ä± orderNumber olarak kullan
        innerHeaderId: item.InnerHeaderID, // BÃ¼yÃ¼k/kÃ¼Ã§Ã¼k harf uyumsuzluÄŸunu gider
        totalQuantity: item.totalQty, // totalQty'yi totalQuantity olarak kullan
        items: item.items || [] // items alanÄ± yoksa boÅŸ dizi kullan
      }));
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri formatlandÄ±', { formattedData });
      return formattedData;
    } catch (error) {
      console.error('Error fetching production orders:', error);
      // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r
      return [];
    }
  },
  
  // Ä°malat fiÅŸi detayÄ±nÄ± getiren fonksiyon
  getProductionOrderByNumber: async (orderNumber: string): Promise<ProductionOrderResponse | null> => {
    try {
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸi detayÄ± iÃ§in endpoint oluÅŸturuyoruz
      // Ãœretim sipariÅŸleri iÃ§in WarehouseTransfer API'sini kullanÄ±yoruz
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OP');
      const url = `/api/WarehouseTransfer/${orderNumber}?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi detayÄ± getiriliyor', { orderNumber, url });
      
      const response = await axiosInstance.get<ApiResponse<ProductionOrderResponse>>(url);
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi detayÄ± baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      if (response.data.success && response.data.data) {
        return response.data.data;
      } else {
        console.warn('API: Ãœretim sipariÅŸi detayÄ± baÅŸarÄ±sÄ±z veya veri yok', response.data);
        return null;
      }
    } catch (error) {
      console.error(`Ãœretim sipariÅŸi detayÄ± getirilirken hata oluÅŸtu ${orderNumber}:`, error);
      return null;
    }
  },
  
  // Ä°malat fiÅŸi kalemlerini getiren fonksiyon
  getProductionOrderItems: async (orderNumber: string): Promise<ProductionOrderItemResponse[]> => {
    try {
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸi kalemleri iÃ§in endpoint oluÅŸturuyoruz
      // Ãœretim sipariÅŸleri iÃ§in WarehouseTransfer API'sini kullanÄ±yoruz
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OP');
      const url = `/api/WarehouseTransfer/${orderNumber}/items?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi kalemleri getiriliyor', { orderNumber, url });
      
      const response = await axiosInstance.get<ApiResponse<ProductionOrderItemResponse[]>>(url);
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi kalemleri baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      return response.data.data || [];
    } catch (error) {
      console.error(`Ãœretim sipariÅŸi kalemleri getirilirken hata oluÅŸtu ${orderNumber}:`, error);
      return []; // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r, throw etme
    }
  },
  
  // Yeni imalat fiÅŸi oluÅŸturan fonksiyon
  createProductionOrder: async (request: ProductionOrderRequest): Promise<string | null> => {
    try {
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      const requestWithProcessCode = {
        ...request,
        innerProcessCode: 'OP'
      };
      
      // Ä°stek verilerini detaylÄ± gÃ¶rÃ¼ntÃ¼le
      console.log('API isteÄŸi detaylarÄ±:', JSON.stringify(requestWithProcessCode, null, 2));
      
      // Ã–nemli alanlarÄ± kontrol et
      console.log('Hedef depo (WarehouseCode):', requestWithProcessCode.targetWarehouseCode);
      console.log('Ä°ÅŸlem tarihi:', requestWithProcessCode.operationDate);
      console.log('ÃœrÃ¼n sayÄ±sÄ±:', requestWithProcessCode.items.length);
      
      // ÃœrÃ¼n detaylarÄ±nÄ± kontrol et
      requestWithProcessCode.items.forEach((item, index) => {
        console.log(`ÃœrÃ¼n ${index + 1}:`, {
          itemCode: item.itemCode,
          colorCode: item.colorCode,
          itemDim1Code: item.itemDim1Code,
          Quantity: item.Quantity,
          unitCode: item.unitCode
        });
      });
      
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi oluÅŸturuluyor');
      // Depo transferleri API'sini kullanarak Ã¼retim sipariÅŸi oluÅŸturma iÃ§in endpoint oluÅŸturuyoruz
      const response = await axiosInstance.post<ApiResponse<string>>(
        '/api/WarehouseTransfer',
        requestWithProcessCode,
        {
          headers: {
            'Content-Type': 'application/json'
          },
          withCredentials: true
        }
      );
      
      if (response.data.success && response.data.data) {
        console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸi baÅŸarÄ±yla oluÅŸturuldu', { status: response.status, data: response.data });
        return response.data.data; // OluÅŸturulan Ã¼retim sipariÅŸi numarasÄ±
      } else {
        console.warn('API: Ãœretim sipariÅŸi oluÅŸturma endpoint baÅŸarÄ±sÄ±z veya veri yok', response.data);
        return null;
      }
    } catch (error: any) {
      console.error('Ãœretim sipariÅŸi oluÅŸturulurken hata oluÅŸtu:', error);
      
      // Hata detaylarÄ±nÄ± gÃ¶rÃ¼ntÃ¼le
      if (error.response) {
        console.error('Hata detaylarÄ±:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: error.response.data
        });
        
        // DoÄŸrulama hatalarÄ±nÄ± detaylÄ± gÃ¶ster
        if (error.response.data && error.response.data.validationErrors) {
          console.error('DoÄŸrulama hatalarÄ±:', error.response.data.validationErrors);
        }
        
        // Hata mesajÄ±nÄ± gÃ¶ster
        if (error.response.data && error.response.data.message) {
          console.error('Hata mesajÄ±:', error.response.data.message);
        }
      }
      
      throw error;
    }
  },
  
  // DepolarÄ± getiren fonksiyon
  getWarehouses: async (): Promise<WarehouseResponse[]> => {
    try {
      console.log('ğŸ“Ÿ API: Ãœretim sipariÅŸleri iÃ§in depolarÄ± getirme iÅŸlemi baÅŸlatÄ±lÄ±yor');
      // Ãœretim sipariÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OP = Operation/Production)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OP');
      // Endpoint dÃ¼zeltildi: Warehouse Transfer API'sinin kullandÄ±ÄŸÄ± endpoint'i kullanÄ±yoruz
      const response = await axiosInstance.get<ApiResponse<WarehouseResponse[]>>(
        `/api/WarehouseTransfer/warehouses?${queryParams.toString()}`
      );
      
      console.log('ğŸ“Ÿ API: Depolar baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      return response.data.data || [];
    } catch (error) {
      console.error('Error fetching warehouses:', error);
      return []; // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r, throw etme
    }
  }
};

export default productionOrderApi;
