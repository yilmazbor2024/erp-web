import axiosInstance from '../config/axios';
import { ApiResponse } from '../api-helpers';

// Sair Sarf FiÅŸi yanÄ±t tipi (Ä°malat FiÅŸi ile aynÄ± yapÄ±da)
export interface ConsumptionOrderResponse {
  // Backend'den gelen orijinal alanlar
  transferNumber: string;
  operationDate: string;
  operationTime: string;
  series: string;
  seriesNumber: string;
  innerProcessCode: string;
  innerProcessDescription: string;
  description?: string;
  targetWarehouseCode: string;
  targetWarehouseName: string;
  warehouseCode: string;
  warehouseDescription: string;
  isCompleted: boolean;
  isLocked: boolean;
  isTransferApproved: boolean;
  transferApprovedDate?: string;
  totalQty: number;
  InnerHeaderID: string;
  
  // Frontend'de kullanÄ±lan alanlar (dÃ¶nÃ¼ÅŸtÃ¼rme sonrasÄ± eklenir)
  orderNumber?: string;
  innerHeaderId?: string;
  totalQuantity?: number;
  
  // Detay sayfasÄ±nda kullanÄ±lan alanlar
  createdUserName?: string;
  createdDate?: string;
  lastUpdatedUserName?: string;
  lastUpdatedDate?: string;
  items: ConsumptionOrderItemResponse[];
}

// Sair Sarf FiÅŸi satÄ±r yanÄ±t tipi (Ä°malat FiÅŸi ile aynÄ± yapÄ±da)
export interface ConsumptionOrderItemResponse {
  innerLineId: string;
  lineNumber: number;
  itemCode: string;
  itemName: string;
  colorCode?: string;
  colorName?: string;
  itemDim1Code?: string;
  itemDim1Name?: string;
  itemDim2Code?: string;
  itemDim2Name?: string;
  itemDim3Code?: string;
  itemDim3Name?: string;
  quantity: number;
  unitCode?: string;
  unitName?: string;
  lineDescription?: string;
}

// Sair Sarf FiÅŸi istek tipi (Ä°malat FiÅŸi ile aynÄ± yapÄ±da)
export interface ConsumptionOrderRequest {
  sourceWarehouseCode?: string;
  targetWarehouseCode: string;
  operationDate?: Date;
  description?: string;
  innerProcessCode?: string;
  shipmentMethodCode?: string;
  items: ConsumptionOrderItemRequest[];
}

// Sair Sarf FiÅŸi satÄ±r istek tipi (Ä°malat FiÅŸi ile aynÄ± yapÄ±da)
export interface ConsumptionOrderItemRequest {
  itemCode: string;
  colorCode?: string;
  itemDim1Code?: string;
  itemDim2Code?: string;
  itemDim3Code?: string;
  Quantity: number;
  quantity?: number; // Eski formlardan gelen quantity alanÄ± (Quantity ile aynÄ± ama kÃ¼Ã§Ã¼k harfle)
  unitCode?: string;
  lineDescription?: string;
  barcode?: string;
  itemTypeCode?: number; // 1: ÃœrÃ¼n, 2: Malzeme
  currencyCode?: string; // VarsayÄ±lan: TRY
  costPrice?: number; // Maliyet fiyatÄ±
  costAmount?: number; // Maliyet tutarÄ±
  costPriceWithInflation?: number; // Enflasyon dÃ¼zeltmeli maliyet fiyatÄ±
  costAmountWithInflation?: number; // Enflasyon dÃ¼zeltmeli maliyet tutarÄ±
}

// Depo yanÄ±t tipi
export interface WarehouseResponse {
  warehouseCode: string;
  warehouseDescription: string;
}

// Sair Sarf FiÅŸi API servisi
const consumptionOrderApi = {
  // Sair Sarf FiÅŸlerini listeleyen fonksiyon
  getConsumptionOrders: async (): Promise<ConsumptionOrderResponse[]> => {
    try {
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸleri getiriliyor');
      // Sair Sarf FiÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OC = Operation Consumption)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OC');
      const url = `/api/WarehouseTransfer?${queryParams.toString()}`;
      
      const response = await axiosInstance.get<ApiResponse<ConsumptionOrderResponse[]>>(url);
      
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸleri baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      // Veriyi frontend iÃ§in formatla
      const formattedData = (response.data.data || []).map(item => ({
        ...item,
        orderNumber: item.transferNumber, // transferNumber'Ä± orderNumber olarak kullan
        innerHeaderId: item.InnerHeaderID, // BÃ¼yÃ¼k/kÃ¼Ã§Ã¼k harf uyumsuzluÄŸunu gider
        totalQuantity: item.totalQty, // totalQty'yi totalQuantity olarak kullan
        items: item.items || [] // items alanÄ± yoksa boÅŸ dizi kullan
      }));
      
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸleri formatlandÄ±', { formattedData });
      return formattedData;
    } catch (error) {
      console.error('Sair Sarf FiÅŸleri getirilirken hata oluÅŸtu:', error);
      // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r
      return [];
    }
  },
  
  // Sair Sarf FiÅŸi detayÄ±nÄ± getiren fonksiyon
  getConsumptionOrderByNumber: async (orderNumber: string): Promise<ConsumptionOrderResponse | null> => {
    try {
      // orderNumber'Ä±n string olduÄŸundan emin olalÄ±m
      if (typeof orderNumber !== 'string') {
        console.error('orderNumber string deÄŸil:', orderNumber, typeof orderNumber);
        return null;
      }
      
      // Depo transferleri API'sini kullanarak Sair Sarf FiÅŸi detayÄ± iÃ§in endpoint oluÅŸturuyoruz
      // Sair Sarf FiÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OC = Operation Consumption)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OC');
      const url = `/api/WarehouseTransfer/${orderNumber}?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸi detayÄ± getiriliyor', { orderNumber, url, orderNumberType: typeof orderNumber });
      
      const response = await axiosInstance.get<ApiResponse<ConsumptionOrderResponse>>(url);
      
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸi detayÄ± baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      if (response.data.success && response.data.data) {
        return response.data.data;
      } else {
        console.warn('API: Sair Sarf FiÅŸi detayÄ± baÅŸarÄ±sÄ±z veya veri yok', response.data);
        return null;
      }
    } catch (error) {
      console.error(`Sair Sarf FiÅŸi detayÄ± getirilirken hata oluÅŸtu ${orderNumber}:`, error);
      return null;
    }
  },
  
  // Sair Sarf FiÅŸi kalemlerini getiren fonksiyon
  getConsumptionOrderItems: async (orderNumber: string): Promise<ConsumptionOrderItemResponse[]> => {
    try {
      // orderNumber'Ä±n string olduÄŸundan emin olalÄ±m
      if (typeof orderNumber !== 'string') {
        console.error('orderNumber string deÄŸil:', orderNumber, typeof orderNumber);
        return [];
      }
      
      // Depo transferleri API'sini kullanarak Sair Sarf FiÅŸi kalemleri iÃ§in endpoint oluÅŸturuyoruz
      // Sair Sarf FiÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OC = Operation Consumption)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OC');
      const url = `/api/WarehouseTransfer/${orderNumber}/items?${queryParams.toString()}`;
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸi kalemleri getiriliyor', { orderNumber, url, orderNumberType: typeof orderNumber });
      
      const response = await axiosInstance.get<ApiResponse<ConsumptionOrderItemResponse[]>>(url);
      
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸi kalemleri baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      
      return response.data.data || [];
    } catch (error) {
      console.error(`Sair Sarf FiÅŸi kalemleri getirilirken hata oluÅŸtu ${orderNumber}:`, error);
      return []; // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r
    }
  },
  
  // Yeni Sair Sarf FiÅŸi oluÅŸturan fonksiyon
  createConsumptionOrder: async (request: ConsumptionOrderRequest): Promise<ConsumptionOrderResponse> => {
    try {
      // Sair Sarf FiÅŸleri iÃ§in iÅŸlem kodu ve eksik alanlarÄ± ekliyoruz
      const requestWithProcessCode = {
        ...request,
        innerProcessCode: 'OC',
        sourceWarehouseCode: request.targetWarehouseCode, // Backend'in beklediÄŸi SourceWarehouseCode alanÄ±nÄ± hedef depo ile dolduruyoruz
        shipmentMethodCode: '1', // Depolar arasÄ± transfer iÃ§in standart deÄŸer
        // AÃ§Ä±klama alanÄ± zorunlu, boÅŸ ise varsayÄ±lan bir deÄŸer atayarak hata almasÄ±nÄ± Ã¶nleme
        description: request.description || 'Sarf FiÅŸi ' + new Date().toLocaleDateString('tr-TR'),
        items: request.items.map(item => {
          // quantity alanÄ±nÄ± kaldÄ±rÄ±p sadece Quantity kullanmak iÃ§in yeni bir nesne oluÅŸturuyoruz
          const { quantity: origQuantity, ...rest } = item;
          
          // Miktar deÄŸerini float olarak hazÄ±rlama
          let finalQuantity = origQuantity || item.Quantity || 1;
          
          // Miktar string ise ("12,45" gibi) float'a Ã§evir
          if (typeof finalQuantity === 'string') {
            // VirgÃ¼llÃ¼ sayÄ±yÄ± noktalÄ± sayÄ±ya Ã§evir ("12,45" -> "12.45")
            const strValue = finalQuantity as string;
            finalQuantity = parseFloat(strValue.replace(',', '.'));
          }
          
          // SayÄ± deÄŸilse veya NaN ise 1 olarak ayarla
          if (isNaN(finalQuantity) || finalQuantity <= 0) {
            finalQuantity = 1;
          }
          
          return {
            ...rest,
            barcode: item.barcode || item.itemCode, // Barkod yoksa itemCode'u kullan
            Quantity: finalQuantity, // DÃ¼zeltilmiÅŸ miktar formatÄ±
            currencyCode: item.currencyCode || 'TRY', // Para birimi kodu
            costPrice: item.costPrice || 0, // Maliyet fiyatÄ±
            costAmount: item.costAmount || 0, // Maliyet tutarÄ±
            colorCode: item.colorCode || '0', // ColorCode zorunlu alan
            itemDim1Code: item.itemDim1Code || '', // ItemDim1Code boÅŸ string olmalÄ±, "0" deÄŸil
            itemTypeCode: item.itemTypeCode !== undefined ? item.itemTypeCode : 2 // ÃœrÃ¼nÃ¼n kendi tipini kullan, yoksa varsayÄ±lan olarak 2 (Malzeme)
          };
        })
      };
      
      // Ä°stek verilerini detaylÄ± gÃ¶rÃ¼ntÃ¼le
      console.log('API isteÄŸi detaylarÄ±:', JSON.stringify(requestWithProcessCode, null, 2));
      
      // Ã–nemli alanlarÄ± kontrol et
      console.log('Hedef depo (WarehouseCode):', requestWithProcessCode.targetWarehouseCode);
      console.log('Ä°ÅŸlem tarihi:', requestWithProcessCode.operationDate);
      console.log('ÃœrÃ¼n sayÄ±sÄ±:', requestWithProcessCode.items.length);
      
      // ÃœrÃ¼n detaylarÄ±nÄ± kontrol et
      requestWithProcessCode.items.forEach((item, index) => {
        console.log(`ÃœrÃ¼n ${index + 1}:`, {
          itemCode: item.itemCode,
          colorCode: item.colorCode || '',
          itemDim1Code: item.itemDim1Code || '',
          Quantity: item.Quantity, // Backend modeli ile eÅŸleÅŸmesi iÃ§in Quantity alanÄ±nÄ± kullanÄ±yoruz
          unitCode: item.unitCode || '',
        });
      });
      
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸi oluÅŸturuluyor');
      // Depo transferleri API'sini kullanarak Sair Sarf FiÅŸi oluÅŸturma iÃ§in endpoint oluÅŸturuyoruz
      const response = await axiosInstance.post<ApiResponse<string>>(
        '/api/WarehouseTransfer',
        requestWithProcessCode,
        {
          headers: {
            'Content-Type': 'application/json'
          },
          withCredentials: true
        }
      );
      
      if (!response.data.success) {
        throw new Error(response.data.message || 'Sarf fiÅŸi oluÅŸturulamadÄ±');
      }

      const orderNumber = response.data.data;
      console.log('ğŸ“Ÿ API: Sarf fiÅŸi baÅŸarÄ±yla oluÅŸturuldu. FiÅŸ No:', orderNumber);

      // OluÅŸturulan fiÅŸ detaylarÄ±nÄ± getir
      let detailResponse;
      let retryCount = 0;
      const maxRetries = 3;
      
      // Yeniden deneme mekanizmasÄ±
      while (retryCount < maxRetries) {
        try {
          // orderNumber'Ä±n string olduÄŸundan emin olalÄ±m
          const orderNumberStr = typeof orderNumber === 'string' ? orderNumber : String(orderNumber);
          console.log('FiÅŸ detaylarÄ± getiriliyor, FiÅŸ No:', orderNumberStr);
          
          // Sair Sarf FiÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OC = Operation Consumption)
          const queryParams = new URLSearchParams();
          queryParams.append('innerProcessCode', 'OC');
          
          detailResponse = await axiosInstance.get<ApiResponse<ConsumptionOrderResponse>>(
            `/api/WarehouseTransfer/${orderNumberStr}?${queryParams.toString()}`
          );
          
          // BaÅŸarÄ±lÄ± yanÄ±t ve veri varsa dÃ¶ngÃ¼den Ã§Ä±k
          if (detailResponse.data.success && detailResponse.data.data) {
            break;
          }
          
          // YanÄ±t var ama satÄ±rlar olmayabilir, satÄ±rlarÄ± ayrÄ±ca getirmeyi dene
          console.log(`Deneme ${retryCount + 1}: YanÄ±t alÄ±ndÄ± ama satÄ±rlar kontrol ediliyor...`);
          
          try {
            // orderNumber'Ä±n string olduÄŸundan emin olalÄ±m
            const orderNumberStr = typeof orderNumber === 'string' ? orderNumber : String(orderNumber);
            console.log('FiÅŸ kalemleri getiriliyor, FiÅŸ No:', orderNumberStr);
            
            // Sair Sarf FiÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OC = Operation Consumption)
            const itemsQueryParams = new URLSearchParams();
            itemsQueryParams.append('innerProcessCode', 'OC');
            
            const itemsResponse = await axiosInstance.get<ApiResponse<ConsumptionOrderItemResponse[]>>(
              `/api/WarehouseTransfer/${orderNumberStr}/items?${itemsQueryParams.toString()}`
            );
            
            // SatÄ±rlar baÅŸarÄ±yla alÄ±ndÄ±ysa, detay yanÄ±tÄ±na ekle
            if (itemsResponse.data.success && itemsResponse.data.data) {
              if (!detailResponse.data.data) {
                detailResponse.data.data = {} as ConsumptionOrderResponse;
              }
              detailResponse.data.data.items = itemsResponse.data.data;
              break;
            }
          } catch (itemsError) {
            console.warn(`FiÅŸ satÄ±rlarÄ± getirilirken hata oluÅŸtu. FiÅŸ No: ${orderNumber}:`, itemsError);
            // Ana istek iÃ§in yeniden denemeye devam et
          }
        } catch (retryError) {
          console.warn(`Deneme ${retryCount + 1} baÅŸarÄ±sÄ±z:`, retryError);
        }
        
        // Yeniden denemeden Ã¶nce bekle
        await new Promise(resolve => setTimeout(resolve, 1000));
        retryCount++;
      }

      // TÃ¼m denemelerden sonra hala geÃ§erli bir yanÄ±t yoksa
      if (!detailResponse || !detailResponse.data.success) {
        console.warn('Birden fazla denemeden sonra fiÅŸ detaylarÄ± getirilemedi');
        
        // Sadece fiÅŸ numarasÄ± ile minimal bir yanÄ±t dÃ¶ndÃ¼r
        const minimalResponse: Partial<ConsumptionOrderResponse> = {
          transferNumber: orderNumber,
          orderNumber: orderNumber,
          description: requestWithProcessCode.description,
          warehouseCode: requestWithProcessCode.sourceWarehouseCode || '',
          targetWarehouseCode: requestWithProcessCode.targetWarehouseCode,
          operationDate: typeof requestWithProcessCode.operationDate === 'string' ? requestWithProcessCode.operationDate : new Date().toISOString().split('T')[0],
          operationTime: new Date().toISOString().split('T')[1].split('.')[0],
          isCompleted: false,
          isLocked: false,
          isTransferApproved: false,
          totalQty: requestWithProcessCode.items.reduce((sum, item) => sum + (item.Quantity || 0), 0),
          series: '',
          seriesNumber: '',
          innerProcessCode: 'OC',
          innerProcessDescription: 'Sarf FiÅŸi',
          // Tip tanÄ±mÄ±nda olmayan alanlarÄ± kaldÄ±rÄ±yorum
          items: requestWithProcessCode.items.map((item, index) => ({
            itemCode: item.itemCode,
            itemName: '',
            colorCode: item.colorCode || '',
            colorName: '',
            itemDim1Code: item.itemDim1Code || '',
            itemDim1Name: '',
            quantity: item.Quantity,
            unitCode: item.unitCode || '',
            unitName: '',
            barcode: item.barcode || '',
            lineDescription: item.lineDescription || '',
            innerLineId: `${index + 1}`,
            lineNumber: index + 1
          }))
        };
        
        return minimalResponse as ConsumptionOrderResponse;
      }

      // API'den gelen yanÄ±tÄ± kullan
      const consumptionOrderResponse = detailResponse.data.data;
      
      // Ã–nemli: orderNumber alanÄ±nÄ± transferNumber ile doldur
      // Bu, frontend'de navigasyon iÃ§in kullanÄ±lacak
      consumptionOrderResponse.orderNumber = consumptionOrderResponse.transferNumber || orderNumber;
      
      console.log('ğŸ“Ÿ API: DÃ¶nÃ¼ÅŸ deÄŸeri kontrolÃ¼:', {
        transferNumber: consumptionOrderResponse.transferNumber,
        orderNumber: consumptionOrderResponse.orderNumber
      });
      
      return consumptionOrderResponse;
    } catch (error: any) {
      console.error('API: Sarf fiÅŸi oluÅŸturulurken hata oluÅŸtu', error);
      
      // Hata detaylarÄ±nÄ± gÃ¶rÃ¼ntÃ¼le
      if (error.response) {
        console.error('Hata detaylarÄ±:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: error.response.data
        });
        
        // Hata mesajÄ±nÄ± gÃ¶rÃ¼ntÃ¼le
        if (error.response.data && error.response.data.message) {
          console.error('Hata mesajÄ±:', error.response.data.message);
        }
      }
      
      throw error;
    }
  },
  
  // DepolarÄ± getiren fonksiyon
  getWarehouses: async (): Promise<WarehouseResponse[]> => {
    try {
      console.log('ğŸ“Ÿ API: Sair Sarf FiÅŸleri iÃ§in depolarÄ± getirme iÅŸlemi baÅŸlatÄ±lÄ±yor');
      // Sair Sarf FiÅŸleri iÃ§in iÅŸlem kodu ekliyoruz (OC = Operation Consumption)
      const queryParams = new URLSearchParams();
      queryParams.append('innerProcessCode', 'OC');
      // Endpoint dÃ¼zeltildi: Warehouse Transfer API'sinin kullandÄ±ÄŸÄ± endpoint'i kullanÄ±yoruz
      const response = await axiosInstance.get<ApiResponse<WarehouseResponse[]>>(
        `/api/WarehouseTransfer/warehouses?${queryParams.toString()}`
      );
      
      console.log('ğŸ“Ÿ API: Depolar baÅŸarÄ±yla alÄ±ndÄ±', { status: response.status, data: response.data });
      return response.data.data || [];
    } catch (error) {
      console.error('Error fetching warehouses:', error);
      return []; // Hata durumunda boÅŸ dizi dÃ¶ndÃ¼r
    }
  }
};

export default consumptionOrderApi;
