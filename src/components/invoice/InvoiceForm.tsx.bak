import React, { useState, useEffect } from 'react';
import { Form, Input, Select, DatePicker, Button, Table, InputNumber, Switch, Card, Row, Col, Divider, Typography, message, Spin } from 'antd';
import { PlusOutlined, DeleteOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';
import invoiceApi from '../../services/invoiceApi';
import { customerApi, warehouseApi, officeApi, vendorApi, currencyApi } from '../../services/entityApi';
import productApi from '../../services/productApi';
import { InvoiceType } from '../../types/invoice';

const { Option } = Select;
const { Title } = Typography;

// Fatura tipi açıklamaları
const invoiceTypeDescriptions = {
  [InvoiceType.WHOLESALE_SALES]: 'Toptan Satış Faturası',
  [InvoiceType.WHOLESALE_PURCHASE]: 'Toptan Alış Faturası',
  [InvoiceType.EXPENSE_SALES]: 'Masraf Satış Faturası',
  [InvoiceType.EXPENSE_PURCHASE]: 'Masraf Alış Faturası'
};

// Cari hesap tipi enum
enum CurrAccType {
  VENDOR = 1,
  CUSTOMER = 3
}

// Invoice detail interface with ID for React key prop
interface InvoiceDetail {
  id: string;
  itemCode: string;
  quantity: number;
  unitOfMeasureCode: string;
  unitPrice: number;
  vatRate: number;
  description?: string;
  discountRate?: number;
  size?: string;       // Beden bilgisi
  color?: string;      // Renk bilgisi
}

// API için gerekli istek tipleri
interface CreateInvoiceRequest {
  invoiceNumber: string;
  invoiceTypeCode: string;
  invoiceDate: string;
  invoiceTime?: string;
  currAccCode: string;
  currAccTypeCode: number;
  docCurrencyCode: string;
  companyCode: string;
  officeCode: string;
  warehouseCode: string;
  customerCode?: string;
  vendorCode?: string;
  isReturn?: boolean;
  isEInvoice?: boolean;
  notes?: string;
  processCode?: string;
  details: InvoiceDetail[];
}

interface InvoiceFormProps {
  type?: InvoiceType;
  onSuccess?: (data: any) => void;
}

const InvoiceForm: React.FC<InvoiceFormProps> = ({ 
  type = InvoiceType.WHOLESALE_SALES, 
  onSuccess 
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [customers, setCustomers] = useState<any[]>([]);
  const [vendors, setVendors] = useState<any[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [loadingProducts, setLoadingProducts] = useState(false);
  const [offices, setOffices] = useState<any[]>([]);
  const [warehouses, setWarehouses] = useState<any[]>([]);
  const [units, setUnits] = useState<any[]>([]);
  const [currencies, setCurrencies] = useState<any[]>([]);
  const [loadingCurrencies, setLoadingCurrencies] = useState(false);
  const [invoiceDetails, setInvoiceDetails] = useState<InvoiceDetail[]>([]);
  const [selectedInvoiceType, setSelectedInvoiceType] = useState<InvoiceType>(type);
  const [currAccType, setCurrAccType] = useState<CurrAccType>(
    type === InvoiceType.WHOLESALE_PURCHASE 
      ? CurrAccType.VENDOR 
      : CurrAccType.CUSTOMER
  );

  // Fatura tipinin adını döndüren yardımcı fonksiyon
  const getInvoiceTypeName = (invoiceType: InvoiceType) => {
    return invoiceTypeDescriptions[invoiceType] || 'Bilinmeyen Fatura Tipi';
  };

  // İlk yükleme için veri yükleme fonksiyonu
  const loadInitialData = async () => {
    try {
      setLoading(true);
      console.log('Form Bileşeni Yüklendi:', invoiceTypeDescriptions[type]);
      
      // Veri yükleme işlemi
      await loadData();
      
      // Otomatik fatura numarası oluştur
      generateInvoiceNumber();
    } catch (error) {
      console.error('Veri yükleme hatası:', error);
      message.error('Veriler yüklenirken bir hata oluştu.');
    } finally {
      setLoading(false);
    }
  };
  
  // Form yüklenince verileri yükle
  useEffect(() => {
    loadInitialData();
  }, []);
  
  // Veri yükleme fonksiyonu
  const loadData = async () => {
    try {
      console.log('Veri yükleme başlıyor...');
      console.log('Cari hesap tipi:', currAccType === CurrAccType.CUSTOMER ? 'Müşteri' : 'Tedarikçi');
      
      // Paralel veri yükleme için Promise.all kullan
      const loadPromises = [];
      
      // Müşterileri yükle
      const loadCustomers = async () => {
        try {
          console.log('Müşteri listesi yükleniyor...');
          const customerResponse = await customerApi.getCustomers();
          
          if (customerResponse && customerResponse.success) {
            // API yanıt yapısını kontrol et
            let customerData: any[] = [];
            const anyData = customerResponse.data as any;
            
            // Veri yapısını tespit et ve veriyi çıkar
            if (anyData && anyData.data && Array.isArray(anyData.data)) {
              customerData = anyData.data;
            } else if (anyData && anyData.items && Array.isArray(anyData.items)) {
              customerData = anyData.items;
            } else if (Array.isArray(anyData)) {
              customerData = anyData;
            } else {
              // Objenin içinde bir dizi bulmaya çalış
              for (const key in anyData) {
                if (Array.isArray(anyData[key])) {
                  customerData = anyData[key];
                  break;
                }
              }
            }
            
            // State güncellemesini yap
            if (customerData && customerData.length > 0) {
              setCustomers([...customerData]);
            } else {
              setCustomers([]);
            }
          } else {
            setCustomers([]);
          }
        } catch (error) {
          console.error('Müşteri yükleme hatası:', error);
          setCustomers([]);
        }
      };
      
      // Tedarikçileri yükle
      const loadVendors = async () => {
        try {
          console.log('Tedarikçi listesi yükleniyor...');
          const vendorResponse = await vendorApi.getVendors();
          
          if (vendorResponse && vendorResponse.success) {
            // API yanıt yapısını kontrol et
            let vendorData: any[] = [];
            const anyData = vendorResponse.data as any;
            
            // Veri yapısını tespit et ve veriyi çıkar
            if (anyData && anyData.data && Array.isArray(anyData.data)) {
              vendorData = anyData.data;
            } else if (anyData && anyData.items && Array.isArray(anyData.items)) {
              vendorData = anyData.items;
            } else if (Array.isArray(anyData)) {
              vendorData = anyData;
            } else {
              // Objenin içinde bir dizi bulmaya çalış
              for (const key in anyData) {
                if (Array.isArray(anyData[key])) {
                  vendorData = anyData[key];
                  break;
                }
              }
            }
            
            // State güncellemesini yap
            if (vendorData && vendorData.length > 0) {
              setVendors([...vendorData]);
            } else {
              setVendors([]);
            }
          } else {
            setVendors([]);
          }
        } catch (error) {
          console.error('Tedarikçi yükleme hatası:', error);
          setVendors([]);
        }
      };
      
      // Ofisleri yükle
      const loadOffices = async () => {
        try {
          console.log('Ofis listesi yükleniyor...');
          const officeResponse = await officeApi.getOffices();
          if (officeResponse && officeResponse.success) {
            const officeData = Array.isArray(officeResponse.data) 
              ? officeResponse.data 
              : (officeResponse.data?.items || officeResponse.data?.data || []);
            setOffices(officeData || []);
          } else {
            setOffices([]);
          }
        } catch (error) {
          console.error('Ofis yükleme hatası:', error);
          setOffices([]);
        }
      };
      
      // Depoları yükle
      const loadWarehouses = async () => {
        try {
          console.log('Depo listesi yükleniyor...');
          const warehouseResponse = await warehouseApi.getWarehouses();
          if (warehouseResponse && warehouseResponse.success) {
            const warehouseData = Array.isArray(warehouseResponse.data) 
              ? warehouseResponse.data 
              : (warehouseResponse.data?.items || warehouseResponse.data?.data || []);
            setWarehouses(warehouseData || []);
          } else {
            setWarehouses([]);
          }
        } catch (error) {
          console.error('Depo yükleme hatası:', error);
          setWarehouses([]);
        }
      };
      
      // Ürünleri yükle
      const loadProducts = async () => {
        try {
          console.log('Ürün listesi yükleniyor...');
          setLoadingProducts(true);
          
          const productListParams = {
            page: 1,
            pageSize: 1000,
            sortBy: 'productCode',
            sortDirection: 'asc' as 'asc' | 'desc'
          };
          
          const productListResponse = await productApi.getProducts(productListParams);
          console.log('API\'den gelen ürün yanıtı:', productListResponse);
          
          if (productListResponse && productListResponse.items) {
            const productItems = productListResponse.items;
            console.log('Ürün öğeleri:', productItems);
            
            // Ürün verilerini dönüştürerek state'e kaydet
            const formattedProducts = productItems.map(item => ({
              productCode: item.productCode,
              productName: item.productDescription,
              productDescription: item.productDescription,
              unitOfMeasureCode: item.unitOfMeasureCode1,
              unitOfMeasureDescription: '',
              salesPrice: 0
            }));
            
            console.log('Düzenlenmiş ürünler:', formattedProducts);
            setProducts(formattedProducts);
          } else {
            setProducts([]);
          }
        } catch (error) {
          console.error('Ürün yükleme hatası:', error);
          setProducts([]);
        } finally {
          setLoadingProducts(false);
        }
      };
      
      // Ölçü birimlerini yükle
      const loadUnits = async () => {
        try {
          const unitsResponse = await productApi.getUnitOfMeasures();
          if (unitsResponse && unitsResponse.length > 0) {
            setUnits(unitsResponse);
          } else {
            // API yanıtı boş ise varsayılan birim listesini kullan
            setUnits([
              { unitOfMeasureCode: 'ADET', unitOfMeasureDescription: 'Adet' },
              { unitOfMeasureCode: 'KG', unitOfMeasureDescription: 'Kilogram' },
              { unitOfMeasureCode: 'LT', unitOfMeasureDescription: 'Litre' },
              { unitOfMeasureCode: 'MT', unitOfMeasureDescription: 'Metre' },
              { unitOfMeasureCode: 'M2', unitOfMeasureDescription: 'Metrekare' },
              { unitOfMeasureCode: 'PKT', unitOfMeasureDescription: 'Paket' }
            ]);
          }
        } catch (error) {
          // Hata durumunda varsayılan birim listesini kullan
          setUnits([
            { unitOfMeasureCode: 'ADET', unitOfMeasureDescription: 'Adet' },
            { unitOfMeasureCode: 'KG', unitOfMeasureDescription: 'Kilogram' },
            { unitOfMeasureCode: 'LT', unitOfMeasureDescription: 'Litre' },
            { unitOfMeasureCode: 'MT', unitOfMeasureDescription: 'Metre' },
            { unitOfMeasureCode: 'M2', unitOfMeasureDescription: 'Metrekare' },
            { unitOfMeasureCode: 'PKT', unitOfMeasureDescription: 'Paket' }
          ]);
        }
      };
      
      // Para birimlerini yükle
      const loadCurrencies = async () => {
        try {
          setLoadingCurrencies(true);
          const currencyResponse = await currencyApi.getCurrencies();
          
          // Yanıt başarılı ve veri varsa
          if (currencyResponse && currencyResponse.success && currencyResponse.data) {
            let currencyData: any[] = [];
            
            if (Array.isArray(currencyResponse.data)) {
              currencyData = currencyResponse.data;
            } else if (typeof currencyResponse.data === 'object') {
              const dataObj = currencyResponse.data as any;
              if (Array.isArray(dataObj.items)) {
                currencyData = dataObj.items;
              } else if (Array.isArray(dataObj.data)) {
                currencyData = dataObj.data;
              }
            }
            
            // Veri boşsa varsayılan para birimlerini kullan
            if (currencyData.length === 0) {
              currencyData = [
                { currencyCode: 'TRY', currencyDescription: 'Türk Lirası' },
                { currencyCode: 'USD', currencyDescription: 'Amerikan Doları' },
                { currencyCode: 'EUR', currencyDescription: 'Euro' },
                { currencyCode: 'GBP', currencyDescription: 'İngiliz Sterlini' }
              ];
            }
            
            setCurrencies(currencyData);
          } else {
            // Varsayılan para birimlerini kullan
            setCurrencies([
              { currencyCode: 'TRY', currencyDescription: 'Türk Lirası' },
              { currencyCode: 'USD', currencyDescription: 'Amerikan Doları' },
              { currencyCode: 'EUR', currencyDescription: 'Euro' },
              { currencyCode: 'GBP', currencyDescription: 'İngiliz Sterlini' }
            ]);
    // Seçilen fatura tipine göre uygun önek belirle
    let prefix = 'WS'; // Varsayılan olarak Toptan Satış
    
    if (selectedInvoiceType === InvoiceType.WHOLESALE_PURCHASE) {
      prefix = 'WP'; // Toptan Alış
    } else if (selectedInvoiceType === InvoiceType.EXPENSE_PURCHASE) {
      prefix = 'MAI'; // Masraf Alış
    } else if (selectedInvoiceType === InvoiceType.EXPENSE_SALES) {
      prefix = 'MAF'; // Masraf Satış
    }
    
    // invoiceApi'den otomatik numara oluştur
    const invoiceNumber = invoiceApi.generateInvoiceNumber(prefix);
    console.log('Otomatik oluşturulan fatura numarası:', invoiceNumber);
    
    // Form alanını güncelle
    form.setFieldsValue({ invoiceNumber });
  };
  
  // Fatura tipi değiştiğinde cari hesap tipini güncelle
  useEffect(() => {
    if (selectedInvoiceType === InvoiceType.WHOLESALE_SALES) {
      setCurrAccType(CurrAccType.CUSTOMER);
    } else {
      setCurrAccType(CurrAccType.VENDOR);
    }
    
    // Fatura tipi değiştiğinde otomatik fatura numarası oluştur
    generateInvoiceNumber();
  }, [selectedInvoiceType]);

  // Fatura tipi değiştiğinde çalışacak fonksiyon
  const handleInvoiceTypeChange = (type: InvoiceType) => {
    setSelectedInvoiceType(type);
    
    // Fatura tipine göre müşteri/tedarikçi seçimini ayarla
    if (type === InvoiceType.WHOLESALE_SALES || type === InvoiceType.EXPENSE_SALES) {
      setCurrAccType(CurrAccType.CUSTOMER);
    } else {
      setCurrAccType(CurrAccType.VENDOR);
    }
    
    // Form alanlarını sıfırla
    form.resetFields(['currAccCode', 'description']);
    setInvoiceDetails([]);
    
    // Fatura tipi değiştiğinde otomatik fatura numarası oluştur
    generateInvoiceNumber();
  };

  // Benzersiz ID oluştur
  const generateUniqueId = () => {
    return `detail-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
  };

  // Yeni fatura detayı ekle
  const addInvoiceDetail = () => {
    setInvoiceDetails([
      ...invoiceDetails,
      {
        id: generateUniqueId(),
        itemCode: '',
        quantity: 1,
        unitOfMeasureCode: '',
        unitPrice: 0,
        vatRate: 18,
        description: '',
        discountRate: 0
      }
    ]);
  };

  // Fatura detayını sil
  const removeInvoiceDetail = (index: number) => {
    const updatedDetails = [...invoiceDetails];
    updatedDetails.splice(index, 1);
    setInvoiceDetails(updatedDetails);
  };

  // Fatura detayını güncelle
  const updateInvoiceDetail = (index: number, field: keyof InvoiceDetail, value: any) => {
    const updatedDetails = [...invoiceDetails];
    updatedDetails[index] = { ...updatedDetails[index], [field]: value };
    setInvoiceDetails(updatedDetails);
  };

  // Fatura oluştur
  const handleSubmit = async (values: any) => {
    setLoading(true);
    try {
      // Fatura detaylarını kontrol et
      if (invoiceDetails.length === 0) {
        message.error('En az bir fatura detayı eklemelisiniz.');
        setLoading(false);
        return;
      }

      // Fatura isteği oluştur
      const invoiceRequest: CreateInvoiceRequest = {
        invoiceNumber: values.invoiceNumber,
        invoiceTypeCode: selectedInvoiceType,
        invoiceDate: values.invoiceDate.format('YYYY-MM-DD'),
        invoiceTime: values.invoiceDate.format('HH:mm:ss'),
        currAccTypeCode: currAccType,
        currAccCode: values.currAccCode,
        docCurrencyCode: values.docCurrencyCode || 'TRY',
        companyCode: '001', // Varsayılan şirket kodu
        warehouseCode: values.warehouseCode,
        officeCode: values.officeCode,
        notes: values.notes || '',
        details: invoiceDetails.map(detail => ({
          id: detail.id,
          itemCode: detail.itemCode,
          unitOfMeasureCode: detail.unitOfMeasureCode,
          quantity: detail.quantity,
          unitPrice: detail.unitPrice,
          vatRate: detail.vatRate,
          discountRate: detail.discountRate || 0,
          description: detail.description || ''
        })),
        isReturn: values.isReturn || false,
        isEInvoice: values.isEInvoice || false
      };

      // Müşteri veya tedarikçi kodunu ayarla
      if (currAccType === CurrAccType.CUSTOMER) {
        invoiceRequest.customerCode = values.currAccCode;
      } else {
        invoiceRequest.vendorCode = values.currAccCode;
      }

      // Masraf faturası ise işlem kodunu (processCode) ayarla
      if (selectedInvoiceType === InvoiceType.EXPENSE_SALES || selectedInvoiceType === InvoiceType.EXPENSE_PURCHASE) {
        // Masraf faturası işlem kodunu kullan
        invoiceRequest.processCode = 'EXP';
      }

      console.log('Fatura isteği:', invoiceRequest);

      // API'ye isteği gönder
      let response;
      try {
        if (selectedInvoiceType === InvoiceType.WHOLESALE_SALES) {
          response = await invoiceApi.createWholesaleInvoice(invoiceRequest);
        } else if (selectedInvoiceType === InvoiceType.WHOLESALE_PURCHASE) {
          response = await invoiceApi.createWholesalePurchaseInvoice(invoiceRequest);
        } else if (selectedInvoiceType === InvoiceType.EXPENSE_SALES || selectedInvoiceType === InvoiceType.EXPENSE_PURCHASE) {
          response = await invoiceApi.createExpenseInvoice(invoiceRequest);
        }

        console.log('API yanıtı:', response);

        if (response && response.success) {
          message.success('Fatura başarıyla oluşturuldu.');
          form.resetFields();
          setInvoiceDetails([]);
          if (onSuccess) {
            onSuccess(response.data);
          }
        } else {
          message.error('Fatura oluşturulurken bir hata oluştu: ' + (response?.message || 'Bilinmeyen hata'));
        }
      } catch (apiError: any) {
        console.error('API hatası:', apiError);
        message.error('API hatası: ' + (apiError.message || 'Bilinmeyen hata'));
      }
    } catch (error: any) {
      console.error('Fatura oluşturma hatası:', error);
      message.error('Fatura oluşturulurken bir hata oluştu: ' + (error.message || 'Bilinmeyen hata'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card title={getInvoiceTypeName(selectedInvoiceType)} loading={loading}>
      <Form form={form} layout="vertical" onFinish={handleSubmit} initialValues={{
        invoiceDate: dayjs(),
        isReturn: false,
        isEInvoice: false
      }}>
        {/* Form içeriği burada */}
        <Row gutter={16}>
          <Col span={8}>
            <Form.Item
              name="invoiceNumber"
              label="Fatura Numarası"
              rules={[{ required: true, message: 'Fatura numarası gereklidir' }]}
              tooltip="Fatura numarası otomatik olarak oluşturulur"
            >
              <Input placeholder="Fatura numarası otomatik oluşturulur" disabled style={{ backgroundColor: '#f5f5f5' }} />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item
              name="invoiceDate"
              label="Fatura Tarihi"
              rules={[{ required: true, message: 'Lütfen fatura tarihini seçin' }]}
            >
              <DatePicker style={{ width: '100%' }} format="DD.MM.YYYY" showTime={{ format: 'HH:mm' }} />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item
              name="currAccCode"
              label={currAccType === CurrAccType.CUSTOMER ? "Müşteri" : "Tedarikçi"}
              rules={[{ required: true, message: `Lütfen ${currAccType === CurrAccType.CUSTOMER ? 'müşteri' : 'tedarikçi'} seçin` }]}
            >
              <Select
                showSearch
                placeholder={`${currAccType === CurrAccType.CUSTOMER ? 'Müşteri' : 'Tedarikçi'} seçin`}
                optionFilterProp="children"
                filterOption={(input, option) =>
                  (option?.label?.toString() || '').toLowerCase().includes(input.toLowerCase())
                }
                options={
                  (currAccType === CurrAccType.CUSTOMER ? customers : vendors)
                    ?.filter(acc => acc && (acc.currAccCode || acc.customerCode || acc.vendorCode))
                    ?.map(acc => ({
                      key: acc.currAccCode || acc.customerCode || acc.vendorCode,
                      value: acc.currAccCode || acc.customerCode || acc.vendorCode,
                      label: `${acc.currAccCode || acc.customerCode || acc.vendorCode} - ${acc.currAccDesc || acc.customerName || acc.vendorName || 'Bilinmeyen'}`
                    }))
                }
              />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={8}>
            <Form.Item
              name="officeCode"
              label="Ofis"
              rules={[{ required: true, message: 'Lütfen ofis seçin' }]}
            >
              <Select
                showSearch
                placeholder="Ofis seçin"
                optionFilterProp="children"
                filterOption={(input, option) =>
                  (option?.label?.toString() || '').toLowerCase().includes(input.toLowerCase())
                }
                options={
                  offices
                    ?.filter(office => office && office.officeCode)
                    ?.map(office => ({
                      key: office.officeCode,
                      value: office.officeCode,
                      label: `${office.officeCode} - ${office.officeName || 'Bilinmeyen ofis'}`
                    }))
                }
              />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item
              name="warehouseCode"
              label="Depo"
              rules={[{ required: true, message: 'Lütfen depo seçin' }]}
            >
              <Select
                showSearch
                placeholder="Depo seçin"
                optionFilterProp="children"
                filterOption={(input, option) =>
                  (option?.label?.toString() || '').toLowerCase().includes(input.toLowerCase())
                }
                options={
                  warehouses
                    ?.filter(warehouse => warehouse && warehouse.warehouseCode)
                    ?.map(warehouse => {
                      // Depo adını düzgün şekilde görüntüle
                      const displayName = warehouse.warehouseDescription || 
                                         warehouse.warehouseName || 
                                         `Depo ${warehouse.warehouseCode}`;
                      
                      return {
                        key: warehouse.warehouseCode,
                        value: warehouse.warehouseCode,
                        label: `${warehouse.warehouseCode} - ${displayName}`
                      };
                    })
                }
              />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item
              name="docCurrencyCode"
              label="Para Birimi"
              initialValue="TRY"
              rules={[{ required: true, message: 'Lütfen para birimi seçin' }]}
            >
              <Select
                placeholder="Para birimi seçin"
                loading={loadingCurrencies}
                showSearch
                optionFilterProp="children"
                filterOption={(input, option) => 
                  (option?.label?.toString() || '').toLowerCase().includes(input.toLowerCase())
                }
              >
                {loadingCurrencies ? (
                  <Select.Option value="" disabled>Yükleniyor...</Select.Option>
                ) : currencies && currencies.length > 0 ? (
                  currencies.map((currency: any) => (
                    <Select.Option key={currency.currencyCode} value={currency.currencyCode}>
                      <strong>{currency.currencyCode}</strong> - {currency.currencyDescription || currency.description}
                    </Select.Option>
                  ))
                ) : (
                  <Select.Option value="" disabled>Para birimi bulunamadı</Select.Option>
                )}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              name="isReturn"
              label="İade Faturası mı?"
              valuePropName="checked"
            >
              <Switch />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              name="isEInvoice"
              label="e-Fatura mı?"
              valuePropName="checked"
            >
              <Switch />
            </Form.Item>
          </Col>
        </Row>

        <Divider orientation="left">Fatura Detayları</Divider>

        <Button 
          type="dashed" 
          onClick={addInvoiceDetail} 
          style={{ marginBottom: 16 }}
          icon={<PlusOutlined />}
        >
          Yeni Kalem Ekle
        </Button>

        <div style={{ overflowX: 'auto' }}>
          <Table 
            dataSource={invoiceDetails} 
            rowKey="id"
            pagination={false}
            size="small"
            bordered
          >
            <Table.Column 
              title="Ürün Kodu" 
              dataIndex="itemCode" 
              key="itemCode"
              width={200}
              render={(value, record, index) => (
                <div style={{ position: 'relative' }}>
                  {loadingProducts ? (
                    <Spin size="small" style={{ marginRight: 8 }} />
                  ) : null}
                  <Select
                    showSearch
                    value={value}
                    style={{ width: '100%' }}
                    placeholder="Ürün seçin"
                    loading={loadingProducts}
                    onChange={(value) => {
                      if (!value) return;
                      
                      // Ürün kodunu güncelle
                      updateInvoiceDetail(index, 'itemCode', value);
                      
                      // Ürün seçildiğinde ürün adını ve diğer bilgileri de güncelle
                      const selectedProduct = products.find(p => p.productCode === value);
                      console.log('Seçilen ürün:', value, selectedProduct);
                      
                      if (selectedProduct) {
                        // Ürün açıklamasını güncelle
                        updateInvoiceDetail(index, 'description', selectedProduct.productDescription);
                        
                        // Birim kodunu güncelle
                        if (selectedProduct.unitOfMeasureCode) {
                          updateInvoiceDetail(index, 'unitOfMeasureCode', selectedProduct.unitOfMeasureCode);
                        } else if (selectedProduct.unitOfMeasureCode1) {
                          // Alternatif birim kodu alanını kontrol et
                          updateInvoiceDetail(index, 'unitOfMeasureCode', selectedProduct.unitOfMeasureCode1);
                        }
                        
                        // Beden bilgisini güncelle (varsa)
                        if (selectedProduct.size || selectedProduct.sizeCode) {
                          updateInvoiceDetail(index, 'size', selectedProduct.size || selectedProduct.sizeCode);
                        }
                        
                        // Renk bilgisini güncelle (varsa)
                        if (selectedProduct.color || selectedProduct.colorCode) {
                          updateInvoiceDetail(index, 'color', selectedProduct.color || selectedProduct.colorCode);
                        }
                        
                        // Birim fiyatını güncelle (varsayılan olarak 0 veya API'den gelen değer)
                        const price = selectedProduct.salesPrice !== undefined ? selectedProduct.salesPrice : 0;
                        updateInvoiceDetail(index, 'unitPrice', price);
                        
                        console.log(`Seçilen ürün bilgileri:`, selectedProduct);
                      }
                    }}
                  >
                    {products.map(product => (
                      <Select.Option key={product.productCode} value={product.productCode}>
                        {product.productCode} - {product.productDescription || 'Bilinmeyen ürün'}
                      </Select.Option>
                    ))}
                  </Select>
                </div>
              )}
            />
              <Table.Column 
                title="Açıklama" 
                dataIndex="description" 
                key="description"
                width={200}
                render={(value, record, index) => {
                  // Ürün kodu seçilmiş mi kontrol et
                  const isProductSelected = record.itemCode && record.itemCode.length > 0;
                  
                  return (
                    <Input 
                      value={value} 
                      onChange={(e) => updateInvoiceDetail(index, 'description', e.target.value)}
                      placeholder="Ürün açıklaması"
                      disabled={isProductSelected} // Ürün seçilmişse disabled yap
                    />
                  );
                }}
              />
              <Table.Column 
                title="Beden" 
                dataIndex="size" 
                key="size"
                width={100}
                render={(value, record, index) => {
                  // Ürün kodu seçilmiş mi kontrol et
                  const isProductSelected = record.itemCode && record.itemCode.length > 0;
                  
                  return (
                    <Input 
                      value={value} 
                      onChange={(e) => updateInvoiceDetail(index, 'size', e.target.value)}
                      placeholder="Beden"
                      disabled={isProductSelected} // Ürün seçilmişse disabled yap
                    />
                  );
                }}
              />
              <Table.Column 
                title="Renk" 
                dataIndex="color" 
                key="color"
                width={100}
                render={(value, record, index) => {
                  // Ürün kodu seçilmiş mi kontrol et
                  const isProductSelected = record.itemCode && record.itemCode.length > 0;
                  
                  return (
                    <Input 
                      value={value} 
                      onChange={(e) => updateInvoiceDetail(index, 'color', e.target.value)}
                      placeholder="Renk"
                      disabled={isProductSelected} // Ürün seçilmişse disabled yap
                    />
                  );
                }}
              />
              <Table.Column 
                title="Miktar" 
                dataIndex="quantity" 
                key="quantity"
                width={100}
                render={(value, record, index) => (
                  <InputNumber 
                    value={value} 
                    min={0.01} 
                    step={0.01}
                    style={{ width: '100%' }}
                    onChange={(value) => updateInvoiceDetail(index, 'quantity', value)}
                  />
                )}
              />
              <Table.Column 
                title="Birim" 
                dataIndex="unitOfMeasureCode" 
                key="unitOfMeasureCode"
                width={120}
                render={(value, record, index) => {
                  // Ürün kodu seçilmiş mi kontrol et
                  const isProductSelected = record.itemCode && record.itemCode.length > 0;
                  
                  return (
                    <Select
                      showSearch
                      value={value}
                      style={{ width: '100%' }}
                      placeholder="Birim seçin"
                      onChange={(value) => updateInvoiceDetail(index, 'unitOfMeasureCode', value)}
                      optionFilterProp="children"
                      disabled={isProductSelected} // Ürün seçilmişse disabled yap
                      filterOption={(input, option) =>
                        (option?.label?.toString() || '').toLowerCase().includes(input.toLowerCase())
                      }
                      options={
                        units
                          ?.filter(unit => unit && unit.unitOfMeasureCode)
                          ?.map(unit => ({
                            key: unit.unitOfMeasureCode,
                            value: unit.unitOfMeasureCode,
                            label: `${unit.unitOfMeasureCode} - ${unit.unitOfMeasureDescription || 'Bilinmeyen birim'}`
                          }))
                      }
                    />
                  );
                }}
              />
              <Table.Column 
                title="Birim Fiyat" 
                dataIndex="unitPrice" 
                key="unitPrice"
                width={120}
                render={(value, record, index) => (
                  <InputNumber 
                    value={value} 
                    min={0} 
                    step={0.01}
                    style={{ width: '100%' }}
                    formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                    parser={(value) => value!.replace(/\$\s?|(,*)/g, '')}
                    onChange={(value) => updateInvoiceDetail(index, 'unitPrice', value)}
                  />
                )}
              />
              <Table.Column 
                title="KDV (%)" 
                dataIndex="vatRate" 
                key="vatRate"
                width={100}
                render={(value, record, index) => (
                  <Select
                    value={value}
                    style={{ width: '100%' }}
                    onChange={(value) => updateInvoiceDetail(index, 'vatRate', value)}
                    options={[
                      { value: 0, label: '%0' },
                      { value: 1, label: '%1' },
                      { value: 8, label: '%8' },
                      { value: 10, label: '%10' },
                      { value: 18, label: '%18' },
                      { value: 20, label: '%20' },
                    ]}
                  />
                )}
              />
              <Table.Column 
                title="İskonto (%)" 
                dataIndex="discountRate" 
                key="discountRate"
                width={100}
                render={(value, record, index) => (
                  <InputNumber 
                    value={value} 
                    min={0} 
                    max={100}
                    style={{ width: '100%' }}
                    onChange={(value) => updateInvoiceDetail(index, 'discountRate', value)}
                  />
                )}
              />
              <Table.Column 
                title="Tutar" 
                key="amount"
                width={120}
                render={(text, record) => {
                  const quantity = record.quantity || 0;
                  const unitPrice = record.unitPrice || 0;
                  const discountRate = record.discountRate || 0;
                  const amount = quantity * unitPrice * (1 - discountRate / 100);
                  return (
                    <span>
                      {amount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                    </span>
                  );
                }}
              />
              <Table.Column 
                title="İşlemler" 
                key="actions"
                width={80}
                render={(text, record, index) => (
                  <Button 
                    type="text" 
                    danger 
                    icon={<DeleteOutlined />} 
                    onClick={() => removeInvoiceDetail(index)}
                  />
                )}
              />
            </Table>
          </div>
  
          <Divider />
  
          <Row gutter={16}>
            <Col span={24}>
              <Form.Item
                name="notes"
                label="Notlar"
              >
                <Input.TextArea rows={4} placeholder="Fatura ile ilgili notlar" />
              </Form.Item>
            </Col>
          </Row>
  
          <Row justify="end">
            <Col>
              <Button type="primary" htmlType="submit" loading={loading}>
                Fatura Oluştur
              </Button>
            </Col>
          </Row>
        </Form>
      </Card>
    );
  };
  
  export default InvoiceForm;